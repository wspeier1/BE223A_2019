function [gradient_x, gradient_y, gradient_z] = gradient(loss, point_2d_one, project_point_2d, point_3d,theta_x,theta_y, theta_z, plane_z, lambda)
    % calculate the gradient
    % theta: translation
    % project_2d_one is just one point in point_2d
    % regularize
    dx = loss/2*(project_point_2d(1,:)-point_2d_one(1,1));
    gradient_x = sum(dx.*(point_3d(3,:)+theta_z)/plane_z)/size(point_3d,2)+ loss/lambda/theta_x ;
    dy = loss/2*(project_point_2d(2,:)-point_2d_one(2,1));
    gradient_y = sum(dy.*(point_3d(3,:)+theta_z)/plane_z)/size(point_3d,2)+ loss/lambda/theta_y;
    
    gradient_z_x = (-2*sum(plane_z*(project_point_2d(1,:)-point_2d_one(1,1)).*(point_3d(1,:)+theta_x)./(point_3d(3,:)+theta_z).^2)/size(point_3d,2) + lambda*theta_z )* loss;
    gradient_z_y = (-2*sum(plane_z*(project_point_2d(2,:)-point_2d_one(2,1)).*(point_3d(2,:)+theta_y)./(point_3d(3,:)+theta_z).^2)/size(point_3d,2)+ lambda*theta_z ) * loss;
    gradient_z = gradient_z_x + gradient_z_y;
end

    